<?php

namespace {{ namespace }};

use {{ namespacedModel }};
use App\Http\Controllers\DashboardBaseController;
use Illuminate\Support\Facades\Gate;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Response;
use {{ namespacedRequests }}
use App\Charts\{{ model }}Chart;
use App\Http\Requests\Store\Store{{ model }}Request;
use App\Http\Requests\Update\Update{{ model }}Request;



class {{ class }} extends DashboardBaseController
{
    /**
     * Display a listing of the resource.
     */
    public function index({{ model }}Chart $chart): Response
    {
        // Check if user is authorized to browse {{modelVariable}}s, otherwise abort with 403 Forbidden
        abort_if(Gate::denies('browse_{{ modelVariable }}s'), 403, response()->json(['message' => 'You are not authorized to browse {{ modelVariable }}s'], 403));
        // Define the columns to be displayed in the DataTable
        $columns=json_encode(['name']);

        // If the request is made through AJAX, retrieve the users data and return it as a JSON response
        if(request()->ajax()) {
            if (request()->has('scope')) {
                $scopeName = request()->input('scope');
                ${{ modelVariable }}s={{ model }}::withTrashed()->with(['relation:id,name'])->$scopeName();
            }else{
                ${{ modelVariable }}s={{ model }}::withTrashed()->with(['relation:id,name']);
            }
            return dataTables(${{ modelVariable }}s)
                ->addColumn('checkbox', function($data){
                    return '<input type="checkbox"  class="checkbox" value="'.$data->id.'" name="checkbox[]" data-id="'.$data->id.'" >';
                })
                
                ->addColumn('action', function($data){
                    return view('users.action', compact('data'));
                })
                ->rawColumns(['action','checkbox'])
                ->addIndexColumn()
                ->make(true);
        }
        // If the request is not made through AJAX, return a view that renders the DataTable
        return view('{{ modelVariable }}s.index',compact('columns'));
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create(): JsonResponse
    {
        if (request()->has('scopes')) {
            // Get the global scopes defined on the Vendor model
            return Response()->json($this->getModelScopes('{{model}}'));
        }else if(request()->has('q'))
        {
            $search = request()->q;
            ${{ modelVariable }}s = {{model}}::select("id", "name as text")
                ->where('name', 'LIKE', "%$search%")
                ->get()
                ->toArray();
        }else
        {
            ${{ modelVariable }}s={{model}}::select("id","name as text")
                ->get()->toArray();
        }
        return Response()->json(${{ modelVariable }}s);
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request): JsonResponse
    {
        abort_if(Gate::denies('add_{{modelVariable}}s'), 403, response()->json(['message' => 'You are not authorized to add {{modelVariable}}s'], 403));

        if($request->filled('id'))
        {
            $request=app(Update{{ model }}Request::class);
            ${{ modelVariable }}={{model}}::find($request->id);
            ${{ modelVariable }}->update([
                "name"=>$request->name, 
            ]);
            $message= ${{ modelVariable }}->name." Updated Successfully";
        }else
        {
            $request=app(Store{{ model }}Request::class);
            ${{ modelVariable }}={{model}}::create([
                "name"=>$request->name,
                
            ]);
            $message= ${{ modelVariable }}->name." Created Successfully";
        }
        return Response()->json(['message'=>$message]);
    }

    /**
     * Display the specified resource.
     */
    public function show({{ model }} ${{ modelVariable }}): JsonResponse
    {
        abort_if(Gate::denies('read_{{modelVariable}}s'), 403, response()->json(['message' => 'You are not authorized to read {{modelVariable}}s'], 403));
        return response()->json(User::with({{relations}})->find(${{ modelVariable }}));
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit({{ model }} ${{ modelVariable }}): JsonResponse
    {
       abort_if(Gate::denies('edit_{{modelVariable}}s'), 403, response()->json(['message' => 'You are not authorized to edit {{modelVariable}}s'], 403));
        return response()->json(User::with({{relations}})->find(${{ modelVariable }}));
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy({{ model }} ${{ modelVariable }}): JsonResponse
    {
        abort_if(Gate::denies('delete_{{modelVariable}}s'), 403, response()->json(['message' => 'You are not authorized to delete {{modelVariable}}s'], 403));

        ${{ modelVariable }}->delete();

        $message= ${{ modelVariable }}->name." Deleted Successfully";

        return Response()->json(['message'=>$message]);
    }

}
