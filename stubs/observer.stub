<?php

namespace {{ namespace }};

use {{ namespacedModel }};
use App\Models\Report;
use Schema;

class {{ class }}
{
    
    /**
     * Handle the {{ model }} "creating" event.
     */
    public function creating({{ model }} ${{ modelVariable }}): void
    {
         ${{ modelVariable }}->created_by = auth()->id;
         ${{ modelVariable }}->created_at = now()->timezone(config('dashboard.time_zone'));
    }

    /**
     * Handle the {{ model }} "created" event.
     */
    public function created({{ model }} ${{ modelVariable }}): void
    {
        $this->reportDetails('Created');
    }

    /**
     * Handle the {{ model }} "updating" event.
     */
    public function creating({{ model }} ${{ modelVariable }}): void
    {
         ${{ modelVariable }}->updated_by = auth()->id;
         ${{ modelVariable }}->updated_at = now()->timezone(config('dashboard.time_zone'));
    }

    /**
     * Handle the {{ model }} "updated" event.
     */
    public function updated({{ model }} ${{ modelVariable }}): void
    {
        $this->reportDetails('Updated');
    }

    /**
     * Handle the {{ model }} "deleting" event.
     */
    public function deleting({{ model }} ${{ modelVariable }}): void
    {
         ${{ modelVariable }}->deleted_by = auth()->id;
    }

    /**
     * Handle the {{ model }} "deleted" event.
     */
    public function deleted({{ model }} ${{ modelVariable }}): void
    {
        $this->reportDetails('Deleted');
    }

    /**
     * Handle the {{ model }} "restored" event.
     */
    public function restored({{ model }} ${{ modelVariable }}): void
    {
        $this->reportDetails('Restored');
    }

    /**
     * Handle the {{ model }} "force deleted" event.
     */
    public function forceDeleted({{ model }} ${{ modelVariable }}): void
    {
        $this->reportDetails('Forcely Deleted');
    }

    public function makeModelDetails()
    {
        $hiddenColumns=config('dashboard.hiddenColumns');
        $columns=Schema::getColumnListing(${{ modelVariable }}->getTable());
        $details="";
        foreach($columns as $columnName){
            if(!in_array($columnName ,$hiddenColumns){
                $details.=${{ modelVariable }}->$columnName."\n";
            }
        }
        return $details;
    }

    public function reportDetails($task)
    {
        Report::create([
            'task'=>"{{ model }}  $task",
            'user'=>auth()->name,
            'details'=>$this->makeModelDetails(),
            'created_at'=>now()->timezone(config('dashboard.time_zone'))
        ]);
    }
}
